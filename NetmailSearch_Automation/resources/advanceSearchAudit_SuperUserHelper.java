// DO NOT EDIT: This file is automatically generated.
//
// Only the associated template file should be edited directly.
// Helper class files are automatically regenerated from the template
// files at various times, including record actions and test object
// insertion actions.  Any changes made directly to a helper class
// file will be lost when automatically updated.

package resources;
import utilities.MySuperHelper;
import com.rational.test.ft.object.interfaces.*;
import com.rational.test.ft.object.interfaces.SAP.*;
import com.rational.test.ft.object.interfaces.WPF.*;
import com.rational.test.ft.object.interfaces.siebel.*;
import com.rational.test.ft.object.interfaces.flex.*;
import com.rational.test.ft.object.interfaces.dojo.*;
import com.rational.test.ft.object.interfaces.generichtmlsubdomain.*;
import com.rational.test.ft.script.*;
import com.rational.test.ft.vp.IFtVerificationPoint;
import com.ibm.rational.test.ft.object.interfaces.sapwebportal.*;
/**
 * Script Name   : <b>advanceSearchAudit_SuperUser</b><br>
 * Generated     : <b>2013/10/31 11:38:03 AM</b><br>
 * Description   : Helper class for script<br>
 * Original Host : Windows Server 2008 R2 x86 6.1 <br>
 * 
 * @since  October 31, 2013
 * @author Administrator
 */
public abstract class advanceSearchAudit_SuperUserHelper extends utilities.MySuperHelper
{
	/**
	 * htmlBrowser: with default state.
	 *		.class : Html.HtmlBrowser
	 * 		.browserName : MS Internet Explorer
	 * 		.processName : iexplore.exe
	 */
	protected BrowserTestObject browser_htmlBrowser() 
	{
		return new BrowserTestObject(
                        getMappedTestObject("browser_htmlBrowser"));
	}
	/**
	 * htmlBrowser: with specific test context and state.
	 *		.class : Html.HtmlBrowser
	 * 		.browserName : MS Internet Explorer
	 * 		.processName : iexplore.exe
	 */
	protected BrowserTestObject browser_htmlBrowser(TestObject anchor, long flags) 
	{
		return new BrowserTestObject(
                        getMappedTestObject("browser_htmlBrowser"), anchor, flags);
	}
	
	/**
	 * AdvancedSearchbutton: with default state.
	 *		.text : Advanced Search
	 * 		type : button
	 * 		.title : 
	 * 		.class : Html.BUTTON
	 * 		.name : 
	 * 		.classIndex : 0
	 * 		class :  x-btn-text
	 */
	protected GuiTestObject button_advancedSearchbutton() 
	{
		return new GuiTestObject(
                        getMappedTestObject("button_advancedSearchbutton"));
	}
	/**
	 * AdvancedSearchbutton: with specific test context and state.
	 *		.text : Advanced Search
	 * 		type : button
	 * 		.title : 
	 * 		.class : Html.BUTTON
	 * 		.name : 
	 * 		.classIndex : 0
	 * 		class :  x-btn-text
	 */
	protected GuiTestObject button_advancedSearchbutton(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("button_advancedSearchbutton"), anchor, flags);
	}
	
	/**
	 * Cancelsubmit: with default state.
	 *		.text : Cancel
	 * 		type : submit
	 * 		.title : 
	 * 		.class : Html.BUTTON
	 * 		.name : 
	 * 		.classIndex : 0
	 * 		class :  x-btn-text
	 */
	protected GuiTestObject button_cancelsubmit() 
	{
		return new GuiTestObject(
                        getMappedTestObject("button_cancelsubmit"));
	}
	/**
	 * Cancelsubmit: with specific test context and state.
	 *		.text : Cancel
	 * 		type : submit
	 * 		.title : 
	 * 		.class : Html.BUTTON
	 * 		.name : 
	 * 		.classIndex : 0
	 * 		class :  x-btn-text
	 */
	protected GuiTestObject button_cancelsubmit(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("button_cancelsubmit"), anchor, flags);
	}
	
	/**
	 * Clearsubmit: with default state.
	 *		.text : Clear
	 * 		type : submit
	 * 		.title : 
	 * 		.class : Html.BUTTON
	 * 		.name : 
	 * 		.classIndex : 0
	 * 		class :  x-btn-text
	 */
	protected GuiTestObject button_clearsubmit() 
	{
		return new GuiTestObject(
                        getMappedTestObject("button_clearsubmit"));
	}
	/**
	 * Clearsubmit: with specific test context and state.
	 *		.text : Clear
	 * 		type : submit
	 * 		.title : 
	 * 		.class : Html.BUTTON
	 * 		.name : 
	 * 		.classIndex : 0
	 * 		class :  x-btn-text
	 */
	protected GuiTestObject button_clearsubmit(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("button_clearsubmit"), anchor, flags);
	}
	
	/**
	 * Searchsubmit: with default state.
	 *		.text : Search
	 * 		type : submit
	 * 		.title : 
	 * 		.class : Html.BUTTON
	 * 		.name : 
	 * 		.classIndex : 0
	 * 		class :  x-btn-text advanced-tb-icon
	 */
	protected GuiTestObject button_searchsubmit() 
	{
		return new GuiTestObject(
                        getMappedTestObject("button_searchsubmit"));
	}
	/**
	 * Searchsubmit: with specific test context and state.
	 *		.text : Search
	 * 		type : submit
	 * 		.title : 
	 * 		.class : Html.BUTTON
	 * 		.name : 
	 * 		.classIndex : 0
	 * 		class :  x-btn-text advanced-tb-icon
	 */
	protected GuiTestObject button_searchsubmit(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("button_searchsubmit"), anchor, flags);
	}
	
	/**
	 * actionscommented: with default state.
	 *		type : checkbox
	 * 		.class : Html.INPUT.checkbox
	 * 		name : actions
	 * 		value : commented
	 * 		class :  x-form-checkbox x-form-field
	 */
	protected ToggleGUITestObject checkBox_actionscommented() 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("checkBox_actionscommented"));
	}
	/**
	 * actionscommented: with specific test context and state.
	 *		type : checkbox
	 * 		.class : Html.INPUT.checkbox
	 * 		name : actions
	 * 		value : commented
	 * 		class :  x-form-checkbox x-form-field
	 */
	protected ToggleGUITestObject checkBox_actionscommented(TestObject anchor, long flags) 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("checkBox_actionscommented"), anchor, flags);
	}
	
	/**
	 * actionscreated: with default state.
	 *		type : checkbox
	 * 		.class : Html.INPUT.checkbox
	 * 		name : actions
	 * 		value : created
	 * 		class :  x-form-checkbox x-form-field
	 */
	protected ToggleGUITestObject checkBox_actionscreated() 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("checkBox_actionscreated"));
	}
	/**
	 * actionscreated: with specific test context and state.
	 *		type : checkbox
	 * 		.class : Html.INPUT.checkbox
	 * 		name : actions
	 * 		value : created
	 * 		class :  x-form-checkbox x-form-field
	 */
	protected ToggleGUITestObject checkBox_actionscreated(TestObject anchor, long flags) 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("checkBox_actionscreated"), anchor, flags);
	}
	
	/**
	 * actionsdeleted: with default state.
	 *		type : checkbox
	 * 		.class : Html.INPUT.checkbox
	 * 		name : actions
	 * 		value : deleted
	 * 		class :  x-form-checkbox x-form-field
	 */
	protected ToggleGUITestObject checkBox_actionsdeleted() 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("checkBox_actionsdeleted"));
	}
	/**
	 * actionsdeleted: with specific test context and state.
	 *		type : checkbox
	 * 		.class : Html.INPUT.checkbox
	 * 		name : actions
	 * 		value : deleted
	 * 		class :  x-form-checkbox x-form-field
	 */
	protected ToggleGUITestObject checkBox_actionsdeleted(TestObject anchor, long flags) 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("checkBox_actionsdeleted"), anchor, flags);
	}
	
	/**
	 * actionsenduserdeleted: with default state.
	 *		type : checkbox
	 * 		.class : Html.INPUT.checkbox
	 * 		name : actions
	 * 		value : enduserdeleted
	 * 		class :  x-form-checkbox x-form-field
	 */
	protected ToggleGUITestObject checkBox_actionsenduserdeleted() 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("checkBox_actionsenduserdeleted"));
	}
	/**
	 * actionsenduserdeleted: with specific test context and state.
	 *		type : checkbox
	 * 		.class : Html.INPUT.checkbox
	 * 		name : actions
	 * 		value : enduserdeleted
	 * 		class :  x-form-checkbox x-form-field
	 */
	protected ToggleGUITestObject checkBox_actionsenduserdeleted(TestObject anchor, long flags) 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("checkBox_actionsenduserdeleted"), anchor, flags);
	}
	
	/**
	 * actionsexported: with default state.
	 *		type : checkbox
	 * 		.class : Html.INPUT.checkbox
	 * 		name : actions
	 * 		value : exported
	 * 		class :  x-form-checkbox x-form-field
	 */
	protected ToggleGUITestObject checkBox_actionsexported() 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("checkBox_actionsexported"));
	}
	/**
	 * actionsexported: with specific test context and state.
	 *		type : checkbox
	 * 		.class : Html.INPUT.checkbox
	 * 		name : actions
	 * 		value : exported
	 * 		class :  x-form-checkbox x-form-field
	 */
	protected ToggleGUITestObject checkBox_actionsexported(TestObject anchor, long flags) 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("checkBox_actionsexported"), anchor, flags);
	}
	
	/**
	 * actionsflagged: with default state.
	 *		type : checkbox
	 * 		.class : Html.INPUT.checkbox
	 * 		name : actions
	 * 		value : flagged
	 * 		class :  x-form-checkbox x-form-field
	 */
	protected ToggleGUITestObject checkBox_actionsflagged() 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("checkBox_actionsflagged"));
	}
	/**
	 * actionsflagged: with specific test context and state.
	 *		type : checkbox
	 * 		.class : Html.INPUT.checkbox
	 * 		name : actions
	 * 		value : flagged
	 * 		class :  x-form-checkbox x-form-field
	 */
	protected ToggleGUITestObject checkBox_actionsflagged(TestObject anchor, long flags) 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("checkBox_actionsflagged"), anchor, flags);
	}
	
	/**
	 * actionsforwarded: with default state.
	 *		type : checkbox
	 * 		.class : Html.INPUT.checkbox
	 * 		name : actions
	 * 		value : forwarded
	 * 		class :  x-form-checkbox x-form-field
	 */
	protected ToggleGUITestObject checkBox_actionsforwarded() 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("checkBox_actionsforwarded"));
	}
	/**
	 * actionsforwarded: with specific test context and state.
	 *		type : checkbox
	 * 		.class : Html.INPUT.checkbox
	 * 		name : actions
	 * 		value : forwarded
	 * 		class :  x-form-checkbox x-form-field
	 */
	protected ToggleGUITestObject checkBox_actionsforwarded(TestObject anchor, long flags) 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("checkBox_actionsforwarded"), anchor, flags);
	}
	
	/**
	 * actionsmigrated: with default state.
	 *		type : checkbox
	 * 		.class : Html.INPUT.checkbox
	 * 		name : actions
	 * 		value : migrated
	 * 		class :  x-form-checkbox x-form-field
	 */
	protected ToggleGUITestObject checkBox_actionsmigrated() 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("checkBox_actionsmigrated"));
	}
	/**
	 * actionsmigrated: with specific test context and state.
	 *		type : checkbox
	 * 		.class : Html.INPUT.checkbox
	 * 		name : actions
	 * 		value : migrated
	 * 		class :  x-form-checkbox x-form-field
	 */
	protected ToggleGUITestObject checkBox_actionsmigrated(TestObject anchor, long flags) 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("checkBox_actionsmigrated"), anchor, flags);
	}
	
	/**
	 * actionsprinted: with default state.
	 *		type : checkbox
	 * 		.class : Html.INPUT.checkbox
	 * 		name : actions
	 * 		value : printed
	 * 		class :  x-form-checkbox x-form-field
	 */
	protected ToggleGUITestObject checkBox_actionsprinted() 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("checkBox_actionsprinted"));
	}
	/**
	 * actionsprinted: with specific test context and state.
	 *		type : checkbox
	 * 		.class : Html.INPUT.checkbox
	 * 		name : actions
	 * 		value : printed
	 * 		class :  x-form-checkbox x-form-field
	 */
	protected ToggleGUITestObject checkBox_actionsprinted(TestObject anchor, long flags) 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("checkBox_actionsprinted"), anchor, flags);
	}
	
	/**
	 * actionsrepublished: with default state.
	 *		type : checkbox
	 * 		.class : Html.INPUT.checkbox
	 * 		name : actions
	 * 		value : republished
	 * 		class :  x-form-checkbox x-form-field
	 */
	protected ToggleGUITestObject checkBox_actionsrepublished() 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("checkBox_actionsrepublished"));
	}
	/**
	 * actionsrepublished: with specific test context and state.
	 *		type : checkbox
	 * 		.class : Html.INPUT.checkbox
	 * 		name : actions
	 * 		value : republished
	 * 		class :  x-form-checkbox x-form-field
	 */
	protected ToggleGUITestObject checkBox_actionsrepublished(TestObject anchor, long flags) 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("checkBox_actionsrepublished"), anchor, flags);
	}
	
	/**
	 * actionsretained: with default state.
	 *		type : checkbox
	 * 		.class : Html.INPUT.checkbox
	 * 		name : actions
	 * 		value : retained
	 * 		class :  x-form-checkbox x-form-field
	 */
	protected ToggleGUITestObject checkBox_actionsretained() 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("checkBox_actionsretained"));
	}
	/**
	 * actionsretained: with specific test context and state.
	 *		type : checkbox
	 * 		.class : Html.INPUT.checkbox
	 * 		name : actions
	 * 		value : retained
	 * 		class :  x-form-checkbox x-form-field
	 */
	protected ToggleGUITestObject checkBox_actionsretained(TestObject anchor, long flags) 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("checkBox_actionsretained"), anchor, flags);
	}
	
	/**
	 * actionssentforprinting: with default state.
	 *		type : checkbox
	 * 		.class : Html.INPUT.checkbox
	 * 		name : actions
	 * 		value : sentforprinting
	 * 		class :  x-form-checkbox x-form-field
	 */
	protected ToggleGUITestObject checkBox_actionssentforprintin() 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("checkBox_actionssentforprintin"));
	}
	/**
	 * actionssentforprinting: with specific test context and state.
	 *		type : checkbox
	 * 		.class : Html.INPUT.checkbox
	 * 		name : actions
	 * 		value : sentforprinting
	 * 		class :  x-form-checkbox x-form-field
	 */
	protected ToggleGUITestObject checkBox_actionssentforprintin(TestObject anchor, long flags) 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("checkBox_actionssentforprintin"), anchor, flags);
	}
	
	/**
	 * actionssentto: with default state.
	 *		type : checkbox
	 * 		.class : Html.INPUT.checkbox
	 * 		name : actions
	 * 		value : sentto
	 * 		class :  x-form-checkbox x-form-field
	 */
	protected ToggleGUITestObject checkBox_actionssentto() 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("checkBox_actionssentto"));
	}
	/**
	 * actionssentto: with specific test context and state.
	 *		type : checkbox
	 * 		.class : Html.INPUT.checkbox
	 * 		name : actions
	 * 		value : sentto
	 * 		class :  x-form-checkbox x-form-field
	 */
	protected ToggleGUITestObject checkBox_actionssentto(TestObject anchor, long flags) 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("checkBox_actionssentto"), anchor, flags);
	}
	
	/**
	 * actionsstubbed: with default state.
	 *		type : checkbox
	 * 		.class : Html.INPUT.checkbox
	 * 		name : actions
	 * 		value : stubbed
	 * 		class :  x-form-checkbox x-form-field
	 */
	protected ToggleGUITestObject checkBox_actionsstubbed() 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("checkBox_actionsstubbed"));
	}
	/**
	 * actionsstubbed: with specific test context and state.
	 *		type : checkbox
	 * 		.class : Html.INPUT.checkbox
	 * 		name : actions
	 * 		value : stubbed
	 * 		class :  x-form-checkbox x-form-field
	 */
	protected ToggleGUITestObject checkBox_actionsstubbed(TestObject anchor, long flags) 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("checkBox_actionsstubbed"), anchor, flags);
	}
	
	/**
	 * actionsviewed: with default state.
	 *		type : checkbox
	 * 		.class : Html.INPUT.checkbox
	 * 		name : actions
	 * 		value : viewed
	 * 		class :  x-form-checkbox x-form-field
	 */
	protected ToggleGUITestObject checkBox_actionsviewed() 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("checkBox_actionsviewed"));
	}
	/**
	 * actionsviewed: with specific test context and state.
	 *		type : checkbox
	 * 		.class : Html.INPUT.checkbox
	 * 		name : actions
	 * 		value : viewed
	 * 		class :  x-form-checkbox x-form-field
	 */
	protected ToggleGUITestObject checkBox_actionsviewed(TestObject anchor, long flags) 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("checkBox_actionsviewed"), anchor, flags);
	}
	
	/**
	 * ifActionson: with default state.
	 *		type : checkbox
	 * 		.class : Html.INPUT.checkbox
	 * 		name : ifActions
	 * 		value : on
	 * 		class :  x-form-checkbox x-form-field
	 */
	protected ToggleGUITestObject checkBox_ifActionson() 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("checkBox_ifActionson"));
	}
	/**
	 * ifActionson: with specific test context and state.
	 *		type : checkbox
	 * 		.class : Html.INPUT.checkbox
	 * 		name : ifActions
	 * 		value : on
	 * 		class :  x-form-checkbox x-form-field
	 */
	protected ToggleGUITestObject checkBox_ifActionson(TestObject anchor, long flags) 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("checkBox_ifActionson"), anchor, flags);
	}
	
	/**
	 * ifAuditoron: with default state.
	 *		type : checkbox
	 * 		.class : Html.INPUT.checkbox
	 * 		name : ifAuditor
	 * 		value : on
	 * 		class :  x-form-checkbox x-form-field
	 */
	protected ToggleGUITestObject checkBox_ifAuditoron() 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("checkBox_ifAuditoron"));
	}
	/**
	 * ifAuditoron: with specific test context and state.
	 *		type : checkbox
	 * 		.class : Html.INPUT.checkbox
	 * 		name : ifAuditor
	 * 		value : on
	 * 		class :  x-form-checkbox x-form-field
	 */
	protected ToggleGUITestObject checkBox_ifAuditoron(TestObject anchor, long flags) 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("checkBox_ifAuditoron"), anchor, flags);
	}
	
	/**
	 * ifCommenton: with default state.
	 *		type : checkbox
	 * 		.class : Html.INPUT.checkbox
	 * 		name : ifComment
	 * 		value : on
	 * 		class :  x-form-checkbox x-form-field
	 */
	protected ToggleGUITestObject checkBox_ifCommenton() 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("checkBox_ifCommenton"));
	}
	/**
	 * ifCommenton: with specific test context and state.
	 *		type : checkbox
	 * 		.class : Html.INPUT.checkbox
	 * 		name : ifComment
	 * 		value : on
	 * 		class :  x-form-checkbox x-form-field
	 */
	protected ToggleGUITestObject checkBox_ifCommenton(TestObject anchor, long flags) 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("checkBox_ifCommenton"), anchor, flags);
	}
	
	/**
	 * ifTagson: with default state.
	 *		type : checkbox
	 * 		.class : Html.INPUT.checkbox
	 * 		name : ifTags
	 * 		value : on
	 * 		class :  x-form-checkbox x-form-field
	 */
	protected ToggleGUITestObject checkBox_ifTagson() 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("checkBox_ifTagson"));
	}
	/**
	 * ifTagson: with specific test context and state.
	 *		type : checkbox
	 * 		.class : Html.INPUT.checkbox
	 * 		name : ifTags
	 * 		value : on
	 * 		class :  x-form-checkbox x-form-field
	 */
	protected ToggleGUITestObject checkBox_ifTagson(TestObject anchor, long flags) 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("checkBox_ifTagson"), anchor, flags);
	}
	
	/**
	 * tagsFlagged: with default state.
	 *		type : checkbox
	 * 		.class : Html.INPUT.checkbox
	 * 		name : tags
	 * 		value : Flagged
	 * 		class :  x-form-checkbox x-form-field
	 */
	protected ToggleGUITestObject checkBox_tagsFlagged() 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("checkBox_tagsFlagged"));
	}
	/**
	 * tagsFlagged: with specific test context and state.
	 *		type : checkbox
	 * 		.class : Html.INPUT.checkbox
	 * 		name : tags
	 * 		value : Flagged
	 * 		class :  x-form-checkbox x-form-field
	 */
	protected ToggleGUITestObject checkBox_tagsFlagged(TestObject anchor, long flags) 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("checkBox_tagsFlagged"), anchor, flags);
	}
	
	/**
	 * tagsPrivilege: with default state.
	 *		type : checkbox
	 * 		.class : Html.INPUT.checkbox
	 * 		name : tags
	 * 		value : Privileged
	 * 		class :  x-form-checkbox x-form-field
	 */
	protected ToggleGUITestObject checkBox_tagsPrivilege() 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("checkBox_tagsPrivilege"));
	}
	/**
	 * tagsPrivilege: with specific test context and state.
	 *		type : checkbox
	 * 		.class : Html.INPUT.checkbox
	 * 		name : tags
	 * 		value : Privileged
	 * 		class :  x-form-checkbox x-form-field
	 */
	protected ToggleGUITestObject checkBox_tagsPrivilege(TestObject anchor, long flags) 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("checkBox_tagsPrivilege"), anchor, flags);
	}
	
	/**
	 * tagsRelevant: with default state.
	 *		type : checkbox
	 * 		.class : Html.INPUT.checkbox
	 * 		name : tags
	 * 		value : Relevant
	 * 		class :  x-form-checkbox x-form-field
	 */
	protected ToggleGUITestObject checkBox_tagsRelevant() 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("checkBox_tagsRelevant"));
	}
	/**
	 * tagsRelevant: with specific test context and state.
	 *		type : checkbox
	 * 		.class : Html.INPUT.checkbox
	 * 		name : tags
	 * 		value : Relevant
	 * 		class :  x-form-checkbox x-form-field
	 */
	protected ToggleGUITestObject checkBox_tagsRelevant(TestObject anchor, long flags) 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("checkBox_tagsRelevant"), anchor, flags);
	}
	
	/**
	 * tagsWorkProduct: with default state.
	 *		type : checkbox
	 * 		.class : Html.INPUT.checkbox
	 * 		name : tags
	 * 		value : Work Product
	 * 		class :  x-form-checkbox x-form-field
	 */
	protected ToggleGUITestObject checkBox_tagsWorkProduct() 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("checkBox_tagsWorkProduct"));
	}
	/**
	 * tagsWorkProduct: with specific test context and state.
	 *		type : checkbox
	 * 		.class : Html.INPUT.checkbox
	 * 		name : tags
	 * 		value : Work Product
	 * 		class :  x-form-checkbox x-form-field
	 */
	protected ToggleGUITestObject checkBox_tagsWorkProduct(TestObject anchor, long flags) 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("checkBox_tagsWorkProduct"), anchor, flags);
	}
	
	/**
	 * advancedSearchWindow: with default state.
	 *		.id : advancedSearchWindow
	 * 		.className :  x-window x-window-noborder x-window-plain
	 * 		.class : Html.DIV
	 */
	protected GuiTestObject html_advancedSearchWindow() 
	{
		return new GuiTestObject(
                        getMappedTestObject("html_advancedSearchWindow"));
	}
	/**
	 * advancedSearchWindow: with specific test context and state.
	 *		.id : advancedSearchWindow
	 * 		.className :  x-window x-window-noborder x-window-plain
	 * 		.class : Html.DIV
	 */
	protected GuiTestObject html_advancedSearchWindow(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("html_advancedSearchWindow"), anchor, flags);
	}
	
	/**
	 * advanceSearchAudit: with default state.
	 *		.text : Audit Files
	 * 		.class : Html.A
	 * 		class : x-menu-item
	 */
	protected GuiTestObject link_advanceSearchAudit() 
	{
		return new GuiTestObject(
                        getMappedTestObject("link_advanceSearchAudit"));
	}
	/**
	 * advanceSearchAudit: with specific test context and state.
	 *		.text : Audit Files
	 * 		.class : Html.A
	 * 		class : x-menu-item
	 */
	protected GuiTestObject link_advanceSearchAudit(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("link_advanceSearchAudit"), anchor, flags);
	}
	
	/**
	 * auditor: with default state.
	 *		type : text
	 * 		.class : Html.INPUT.text
	 * 		name : auditor
	 * 		class : x-form-text x-form-field x-abs-layout-item
	 */
	protected TextGuiTestObject text_auditor() 
	{
		return new TextGuiTestObject(
                        getMappedTestObject("text_auditor"));
	}
	/**
	 * auditor: with specific test context and state.
	 *		type : text
	 * 		.class : Html.INPUT.text
	 * 		name : auditor
	 * 		class : x-form-text x-form-field x-abs-layout-item
	 */
	protected TextGuiTestObject text_auditor(TestObject anchor, long flags) 
	{
		return new TextGuiTestObject(
                        getMappedTestObject("text_auditor"), anchor, flags);
	}
	
	/**
	 * comment: with default state.
	 *		type : text
	 * 		.class : Html.INPUT.text
	 * 		name : comment
	 * 		class : x-form-text x-form-field x-abs-layout-item
	 */
	protected TextGuiTestObject text_comment() 
	{
		return new TextGuiTestObject(
                        getMappedTestObject("text_comment"));
	}
	/**
	 * comment: with specific test context and state.
	 *		type : text
	 * 		.class : Html.INPUT.text
	 * 		name : comment
	 * 		class : x-form-text x-form-field x-abs-layout-item
	 */
	protected TextGuiTestObject text_comment(TestObject anchor, long flags) 
	{
		return new TextGuiTestObject(
                        getMappedTestObject("text_comment"), anchor, flags);
	}
	
	

	protected advanceSearchAudit_SuperUserHelper()
	{
		setScriptName("advanceSearchAudit_SuperUser");
	}
	
}

