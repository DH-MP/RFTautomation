// DO NOT EDIT: This file is automatically generated.
//
// Only the associated template file should be edited directly.
// Helper class files are automatically regenerated from the template
// files at various times, including record actions and test object
// insertion actions.  Any changes made directly to a helper class
// file will be lost when automatically updated.

package resources.NetmailAdminUUI;
import utilities.MySuperHelper;
import com.rational.test.ft.object.interfaces.*;
import com.rational.test.ft.object.interfaces.SAP.*;
import com.rational.test.ft.object.interfaces.WPF.*;
import com.rational.test.ft.object.interfaces.siebel.*;
import com.rational.test.ft.object.interfaces.flex.*;
import com.rational.test.ft.object.interfaces.dojo.*;
import com.rational.test.ft.object.interfaces.generichtmlsubdomain.*;
import com.rational.test.ft.script.*;
import com.rational.test.ft.vp.IFtVerificationPoint;
import com.ibm.rational.test.ft.object.interfaces.sapwebportal.*;
/**
 * Script Name   : <b>WebAdmin</b><br>
 * Generated     : <b>2014/07/24 4:10:32 PM</b><br>
 * Description   : Helper class for script<br>
 * Original Host : Windows Server 2008 R2 x86 6.1 <br>
 * 
 * @since  July 24, 2014
 * @author Administrator
 */
public abstract class WebAdminHelper extends utilities.MySuperHelper
{
	/**
	 * htmlBrowser: with default state.
	 *		.class : Html.HtmlBrowser
	 * 		.browserName : MS Internet Explorer
	 * 		.processName : iexplore.exe
	 */
	protected BrowserTestObject browser_htmlBrowser() 
	{
		return new BrowserTestObject(
                        getMappedTestObject("browser_htmlBrowser"));
	}
	/**
	 * htmlBrowser: with specific test context and state.
	 *		.class : Html.HtmlBrowser
	 * 		.browserName : MS Internet Explorer
	 * 		.processName : iexplore.exe
	 */
	protected BrowserTestObject browser_htmlBrowser(TestObject anchor, long flags) 
	{
		return new BrowserTestObject(
                        getMappedTestObject("browser_htmlBrowser"), anchor, flags);
	}
	
	/**
	 * AddButton: with default state.
	 *		.id : bttnAdd
	 * 		.type : button
	 * 		.value : Add  >>
	 * 		.class : Html.INPUT.button
	 */
	protected GuiTestObject button_addButton() 
	{
		return new GuiTestObject(
                        getMappedTestObject("button_addButton"));
	}
	/**
	 * AddButton: with specific test context and state.
	 *		.id : bttnAdd
	 * 		.type : button
	 * 		.value : Add  >>
	 * 		.class : Html.INPUT.button
	 */
	protected GuiTestObject button_addButton(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("button_addButton"), anchor, flags);
	}
	
	/**
	 * archiveUserList_AddButton: with default state.
	 *		.id : bttnAdd
	 * 		.type : button
	 * 		.value : Add  >>
	 * 		.class : Html.INPUT.button
	 */
	protected GuiTestObject button_archiveUserList_AddButt() 
	{
		return new GuiTestObject(
                        getMappedTestObject("button_archiveUserList_AddButt"));
	}
	/**
	 * archiveUserList_AddButton: with specific test context and state.
	 *		.id : bttnAdd
	 * 		.type : button
	 * 		.value : Add  >>
	 * 		.class : Html.INPUT.button
	 */
	protected GuiTestObject button_archiveUserList_AddButt(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("button_archiveUserList_AddButt"), anchor, flags);
	}
	
	/**
	 * archiveUserList_Remove: with default state.
	 *		.text : 
	 * 		.id : bttnRemove
	 * 		.type : button
	 * 		.value : Remove
	 * 		.title : 
	 * 		.class : Html.INPUT.button
	 * 		.name : 
	 * 		.classIndex : 2
	 */
	protected GuiTestObject button_archiveUserList_Remove() 
	{
		return new GuiTestObject(
                        getMappedTestObject("button_archiveUserList_Remove"));
	}
	/**
	 * archiveUserList_Remove: with specific test context and state.
	 *		.text : 
	 * 		.id : bttnRemove
	 * 		.type : button
	 * 		.value : Remove
	 * 		.title : 
	 * 		.class : Html.INPUT.button
	 * 		.name : 
	 * 		.classIndex : 2
	 */
	protected GuiTestObject button_archiveUserList_Remove(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("button_archiveUserList_Remove"), anchor, flags);
	}
	
	/**
	 * Findbutton: with default state.
	 *		.type : button
	 * 		.value : Find
	 * 		.class : Html.INPUT.button
	 */
	protected GuiTestObject button_findbutton() 
	{
		return new GuiTestObject(
                        getMappedTestObject("button_findbutton"));
	}
	/**
	 * Findbutton: with specific test context and state.
	 *		.type : button
	 * 		.value : Find
	 * 		.class : Html.INPUT.button
	 */
	protected GuiTestObject button_findbutton(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("button_findbutton"), anchor, flags);
	}
	
	/**
	 * HtmlDialogButtonOK: with default state.
	 *		.text : OK
	 * 		.class : Html.DialogButton
	 * 		.classIndex : 0
	 */
	protected GuiTestObject button_htmlDialogButtonOK() 
	{
		return new GuiTestObject(
                        getMappedTestObject("button_htmlDialogButtonOK"));
	}
	/**
	 * HtmlDialogButtonOK: with specific test context and state.
	 *		.text : OK
	 * 		.class : Html.DialogButton
	 * 		.classIndex : 0
	 */
	protected GuiTestObject button_htmlDialogButtonOK(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("button_htmlDialogButtonOK"), anchor, flags);
	}
	
	/**
	 * index_Load: with default state.
	 *		.type : button
	 * 		.value : Load
	 * 		.class : Html.INPUT.button
	 */
	protected GuiTestObject button_indexLoadbutton() 
	{
		return new GuiTestObject(
                        getMappedTestObject("button_indexLoadbutton"));
	}
	/**
	 * index_Load: with specific test context and state.
	 *		.type : button
	 * 		.value : Load
	 * 		.class : Html.INPUT.button
	 */
	protected GuiTestObject button_indexLoadbutton(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("button_indexLoadbutton"), anchor, flags);
	}
	
	/**
	 * index_Add: with default state.
	 *		.id : bttnAdd
	 * 		.type : button
	 * 		.value : Add  >>
	 * 		.class : Html.INPUT.button
	 */
	protected GuiTestObject button_index_Add() 
	{
		return new GuiTestObject(
                        getMappedTestObject("button_index_Add"));
	}
	/**
	 * index_Add: with specific test context and state.
	 *		.id : bttnAdd
	 * 		.type : button
	 * 		.value : Add  >>
	 * 		.class : Html.INPUT.button
	 */
	protected GuiTestObject button_index_Add(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("button_index_Add"), anchor, flags);
	}
	
	/**
	 * index_OK: with default state.
	 *		.type : button
	 * 		.value : OK
	 * 		.class : Html.INPUT.button
	 */
	protected GuiTestObject button_index_OK() 
	{
		return new GuiTestObject(
                        getMappedTestObject("button_index_OK"));
	}
	/**
	 * index_OK: with specific test context and state.
	 *		.type : button
	 * 		.value : OK
	 * 		.class : Html.INPUT.button
	 */
	protected GuiTestObject button_index_OK(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("button_index_OK"), anchor, flags);
	}
	
	/**
	 * index_Remove: with default state.
	 *		.id : bttnRemove
	 * 		.type : button
	 * 		.value : Remove
	 * 		.class : Html.INPUT.button
	 */
	protected GuiTestObject button_index_Remove() 
	{
		return new GuiTestObject(
                        getMappedTestObject("button_index_Remove"));
	}
	/**
	 * index_Remove: with specific test context and state.
	 *		.id : bttnRemove
	 * 		.type : button
	 * 		.value : Remove
	 * 		.class : Html.INPUT.button
	 */
	protected GuiTestObject button_index_Remove(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("button_index_Remove"), anchor, flags);
	}
	
	/**
	 * ListUsersbutton: with default state.
	 *		.type : button
	 * 		.value : List Users
	 * 		.class : Html.INPUT.button
	 */
	protected GuiTestObject button_listUsersbutton() 
	{
		return new GuiTestObject(
                        getMappedTestObject("button_listUsersbutton"));
	}
	/**
	 * ListUsersbutton: with specific test context and state.
	 *		.type : button
	 * 		.value : List Users
	 * 		.class : Html.INPUT.button
	 */
	protected GuiTestObject button_listUsersbutton(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("button_listUsersbutton"), anchor, flags);
	}
	
	/**
	 * LogInbutton: with default state.
	 *		.type : button
	 * 		.value : Log In
	 * 		.class : Html.INPUT.button
	 */
	protected GuiTestObject button_logInbutton() 
	{
		return new GuiTestObject(
                        getMappedTestObject("button_logInbutton"));
	}
	/**
	 * LogInbutton: with specific test context and state.
	 *		.type : button
	 * 		.value : Log In
	 * 		.class : Html.INPUT.button
	 */
	protected GuiTestObject button_logInbutton(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("button_logInbutton"), anchor, flags);
	}
	
	/**
	 * OKbutton: with default state.
	 *		.text : 
	 * 		.id : 
	 * 		.type : button
	 * 		.value : OK
	 * 		.title : 
	 * 		.class : Html.INPUT.button
	 * 		.name : 
	 * 		.classIndex : 0
	 */
	protected GuiTestObject button_oKbutton() 
	{
		return new GuiTestObject(
                        getMappedTestObject("button_oKbutton"));
	}
	/**
	 * OKbutton: with specific test context and state.
	 *		.text : 
	 * 		.id : 
	 * 		.type : button
	 * 		.value : OK
	 * 		.title : 
	 * 		.class : Html.INPUT.button
	 * 		.name : 
	 * 		.classIndex : 0
	 */
	protected GuiTestObject button_oKbutton(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("button_oKbutton"), anchor, flags);
	}
	
	/**
	 * Removebutton: with default state.
	 *		.id : bttnRemove
	 * 		.type : button
	 * 		.value : Remove
	 * 		.class : Html.INPUT.button
	 */
	protected GuiTestObject button_removebutton() 
	{
		return new GuiTestObject(
                        getMappedTestObject("button_removebutton"));
	}
	/**
	 * Removebutton: with specific test context and state.
	 *		.id : bttnRemove
	 * 		.type : button
	 * 		.value : Remove
	 * 		.class : Html.INPUT.button
	 */
	protected GuiTestObject button_removebutton(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("button_removebutton"), anchor, flags);
	}
	
	/**
	 * RunNowbutton: with default state.
	 *		.type : button
	 * 		.value : Run Now
	 * 		.class : Html.INPUT.button
	 * 		.name : btnRunNow
	 */
	protected GuiTestObject button_runNowbutton() 
	{
		return new GuiTestObject(
                        getMappedTestObject("button_runNowbutton"));
	}
	/**
	 * RunNowbutton: with specific test context and state.
	 *		.type : button
	 * 		.value : Run Now
	 * 		.class : Html.INPUT.button
	 * 		.name : btnRunNow
	 */
	protected GuiTestObject button_runNowbutton(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("button_runNowbutton"), anchor, flags);
	}
	
	/**
	 * RunNowbutton: with default state.
	 *		.type : button
	 * 		.value : Run Now
	 * 		.class : Html.INPUT.button
	 */
	protected GuiTestObject button_runNowbutton2() 
	{
		return new GuiTestObject(
                        getMappedTestObject("button_runNowbutton2"));
	}
	/**
	 * RunNowbutton: with specific test context and state.
	 *		.type : button
	 * 		.value : Run Now
	 * 		.class : Html.INPUT.button
	 */
	protected GuiTestObject button_runNowbutton2(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("button_runNowbutton2"), anchor, flags);
	}
	
	/**
	 * Savebutton: with default state.
	 *		.type : button
	 * 		.value : Save
	 * 		.class : Html.INPUT.button
	 */
	protected GuiTestObject button_savebutton() 
	{
		return new GuiTestObject(
                        getMappedTestObject("button_savebutton"));
	}
	/**
	 * Savebutton: with specific test context and state.
	 *		.type : button
	 * 		.value : Save
	 * 		.class : Html.INPUT.button
	 */
	protected GuiTestObject button_savebutton(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("button_savebutton"), anchor, flags);
	}
	
	/**
	 * SelectButton: with default state.
	 *		.id : bttnSelect
	 * 		.type : button
	 * 		.value : Select >>
	 * 		.class : Html.INPUT.button
	 */
	protected GuiTestObject button_selectButton() 
	{
		return new GuiTestObject(
                        getMappedTestObject("button_selectButton"));
	}
	/**
	 * SelectButton: with specific test context and state.
	 *		.id : bttnSelect
	 * 		.type : button
	 * 		.value : Select >>
	 * 		.class : Html.INPUT.button
	 */
	protected GuiTestObject button_selectButton(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("button_selectButton"), anchor, flags);
	}
	
	/**
	 * settingUsersSelect: with default state.
	 *		.type : button
	 * 		.value : Select
	 * 		.class : Html.INPUT.button
	 * 		.name : CButton2
	 */
	protected GuiTestObject button_settingUsersSelect() 
	{
		return new GuiTestObject(
                        getMappedTestObject("button_settingUsersSelect"));
	}
	/**
	 * settingUsersSelect: with specific test context and state.
	 *		.type : button
	 * 		.value : Select
	 * 		.class : Html.INPUT.button
	 * 		.name : CButton2
	 */
	protected GuiTestObject button_settingUsersSelect(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("button_settingUsersSelect"), anchor, flags);
	}
	
	/**
	 * Xbutton: with default state.
	 *		.type : button
	 * 		.value : X
	 * 		.class : Html.INPUT.button
	 */
	protected GuiTestObject button_xbutton() 
	{
		return new GuiTestObject(
                        getMappedTestObject("button_xbutton"));
	}
	/**
	 * Xbutton: with specific test context and state.
	 *		.type : button
	 * 		.value : X
	 * 		.class : Html.INPUT.button
	 */
	protected GuiTestObject button_xbutton(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("button_xbutton"), anchor, flags);
	}
	
	/**
	 * netmail: with default state.
	 *		.title : netmail
	 * 		.class : Html.HtmlDocument
	 */
	protected DocumentTestObject document_netmail() 
	{
		return new DocumentTestObject(
                        getMappedTestObject("document_netmail"));
	}
	/**
	 * netmail: with specific test context and state.
	 *		.title : netmail
	 * 		.class : Html.HtmlDocument
	 */
	protected DocumentTestObject document_netmail(TestObject anchor, long flags) 
	{
		return new DocumentTestObject(
                        getMappedTestObject("document_netmail"), anchor, flags);
	}
	
	/**
	 * admin: with default state.
	 *		.id : admin
	 * 		.class : Html.DIV
	 */
	protected GuiTestObject html_admin() 
	{
		return new GuiTestObject(
                        getMappedTestObject("html_admin"));
	}
	/**
	 * admin: with specific test context and state.
	 *		.id : admin
	 * 		.class : Html.DIV
	 */
	protected GuiTestObject html_admin(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("html_admin"), anchor, flags);
	}
	
	/**
	 * framework: with default state.
	 *		.id : framework
	 * 		.class : Html.DIV
	 */
	protected GuiTestObject html_framework() 
	{
		return new GuiTestObject(
                        getMappedTestObject("html_framework"));
	}
	/**
	 * framework: with specific test context and state.
	 *		.id : framework
	 * 		.class : Html.DIV
	 */
	protected GuiTestObject html_framework(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("html_framework"), anchor, flags);
	}
	
	/**
	 * ScheduleFS: with default state.
	 *		.id : ScheduleFS
	 * 		.class : Html.FIELDSET
	 */
	protected GuiTestObject html_scheduleFS() 
	{
		return new GuiTestObject(
                        getMappedTestObject("html_scheduleFS"));
	}
	/**
	 * ScheduleFS: with specific test context and state.
	 *		.id : ScheduleFS
	 * 		.class : Html.FIELDSET
	 */
	protected GuiTestObject html_scheduleFS(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("html_scheduleFS"), anchor, flags);
	}
	
	/**
	 * Archive: with default state.
	 *		.text : Archive
	 * 		.class : Html.A
	 * 		.classIndex : 2
	 * 		class : x-tree-node-anchor
	 */
	protected GuiTestObject link_archive() 
	{
		return new GuiTestObject(
                        getMappedTestObject("link_archive"));
	}
	/**
	 * Archive: with specific test context and state.
	 *		.text : Archive
	 * 		.class : Html.A
	 * 		.classIndex : 2
	 * 		class : x-tree-node-anchor
	 */
	protected GuiTestObject link_archive(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("link_archive"), anchor, flags);
	}
	
	/**
	 * overridelink: with default state.
	 *		.text : Continue to this website (not recommended).
	 * 		.class : Html.A
	 * 		.name : overridelink
	 */
	protected GuiTestObject link_overridelink() 
	{
		return new GuiTestObject(
                        getMappedTestObject("link_overridelink"));
	}
	/**
	 * overridelink: with specific test context and state.
	 *		.text : Continue to this website (not recommended).
	 * 		.class : Html.A
	 * 		.name : overridelink
	 */
	protected GuiTestObject link_overridelink(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("link_overridelink"), anchor, flags);
	}
	
	/**
	 * CSelect_ArchiveLocationList: with default state.
	 *		.class : Html.SELECT
	 * 		.name : CSelect_ArchiveLocationList
	 */
	protected SelectGuiSubitemTestObject list_cSelect_ArchiveLocationLi() 
	{
		return new SelectGuiSubitemTestObject(
                        getMappedTestObject("list_cSelect_ArchiveLocationLi"));
	}
	/**
	 * CSelect_ArchiveLocationList: with specific test context and state.
	 *		.class : Html.SELECT
	 * 		.name : CSelect_ArchiveLocationList
	 */
	protected SelectGuiSubitemTestObject list_cSelect_ArchiveLocationLi(TestObject anchor, long flags) 
	{
		return new SelectGuiSubitemTestObject(
                        getMappedTestObject("list_cSelect_ArchiveLocationLi"), anchor, flags);
	}
	
	/**
	 * idProxyList: with default state.
	 *		.class : Html.SELECT
	 */
	protected SelectGuiSubitemTestObject list_idProxyList() 
	{
		return new SelectGuiSubitemTestObject(
                        getMappedTestObject("list_idProxyList"));
	}
	/**
	 * idProxyList: with specific test context and state.
	 *		.class : Html.SELECT
	 */
	protected SelectGuiSubitemTestObject list_idProxyList(TestObject anchor, long flags) 
	{
		return new SelectGuiSubitemTestObject(
                        getMappedTestObject("list_idProxyList"), anchor, flags);
	}
	
	/**
	 * idUserList: with default state.
	 *		.id : idUserList
	 * 		.class : Html.SELECT
	 */
	protected SelectGuiSubitemTestObject list_idUserList() 
	{
		return new SelectGuiSubitemTestObject(
                        getMappedTestObject("list_idUserList"));
	}
	/**
	 * idUserList: with specific test context and state.
	 *		.id : idUserList
	 * 		.class : Html.SELECT
	 */
	protected SelectGuiSubitemTestObject list_idUserList(TestObject anchor, long flags) 
	{
		return new SelectGuiSubitemTestObject(
                        getMappedTestObject("list_idUserList"), anchor, flags);
	}
	
	/**
	 * IndexLocationList: with default state.
	 *		.class : Html.SELECT
	 * 		.name : CSelect_ArchiveLocationList
	 */
	protected SelectGuiSubitemTestObject list_indexLocationList() 
	{
		return new SelectGuiSubitemTestObject(
                        getMappedTestObject("list_indexLocationList"));
	}
	/**
	 * IndexLocationList: with specific test context and state.
	 *		.class : Html.SELECT
	 * 		.name : CSelect_ArchiveLocationList
	 */
	protected SelectGuiSubitemTestObject list_indexLocationList(TestObject anchor, long flags) 
	{
		return new SelectGuiSubitemTestObject(
                        getMappedTestObject("list_indexLocationList"), anchor, flags);
	}
	
	/**
	 * indexUserListB: with default state.
	 *		.id : UserListB
	 * 		.class : Html.SELECT
	 * 		class : userlist
	 */
	protected SelectGuiSubitemTestObject list_indexUserListB() 
	{
		return new SelectGuiSubitemTestObject(
                        getMappedTestObject("list_indexUserListB"));
	}
	/**
	 * indexUserListB: with specific test context and state.
	 *		.id : UserListB
	 * 		.class : Html.SELECT
	 * 		class : userlist
	 */
	protected SelectGuiSubitemTestObject list_indexUserListB(TestObject anchor, long flags) 
	{
		return new SelectGuiSubitemTestObject(
                        getMappedTestObject("list_indexUserListB"), anchor, flags);
	}
	
	/**
	 * index_UserListA: with default state.
	 *		.id : UserListA
	 * 		.class : Html.SELECT
	 * 		class : userlist
	 */
	protected SelectGuiSubitemTestObject list_index_UserListA() 
	{
		return new SelectGuiSubitemTestObject(
                        getMappedTestObject("list_index_UserListA"));
	}
	/**
	 * index_UserListA: with specific test context and state.
	 *		.id : UserListA
	 * 		.class : Html.SELECT
	 * 		class : userlist
	 */
	protected SelectGuiSubitemTestObject list_index_UserListA(TestObject anchor, long flags) 
	{
		return new SelectGuiSubitemTestObject(
                        getMappedTestObject("list_index_UserListA"), anchor, flags);
	}
	
	/**
	 * UserListA: with default state.
	 *		.id : UserListA
	 * 		.className : userlist
	 * 		.class : Html.SELECT
	 * 		class : userlist
	 */
	protected SelectGuiSubitemTestObject list_userListA() 
	{
		return new SelectGuiSubitemTestObject(
                        getMappedTestObject("list_userListA"));
	}
	/**
	 * UserListA: with specific test context and state.
	 *		.id : UserListA
	 * 		.className : userlist
	 * 		.class : Html.SELECT
	 * 		class : userlist
	 */
	protected SelectGuiSubitemTestObject list_userListA(TestObject anchor, long flags) 
	{
		return new SelectGuiSubitemTestObject(
                        getMappedTestObject("list_userListA"), anchor, flags);
	}
	
	/**
	 * UserListB: with default state.
	 *		.id : UserListB
	 * 		.class : Html.SELECT
	 * 		class : userlist
	 */
	protected SelectGuiSubitemTestObject list_userListB() 
	{
		return new SelectGuiSubitemTestObject(
                        getMappedTestObject("list_userListB"));
	}
	/**
	 * UserListB: with specific test context and state.
	 *		.id : UserListB
	 * 		.class : Html.SELECT
	 * 		class : userlist
	 */
	protected SelectGuiSubitemTestObject list_userListB(TestObject anchor, long flags) 
	{
		return new SelectGuiSubitemTestObject(
                        getMappedTestObject("list_userListB"), anchor, flags);
	}
	
	/**
	 * runningJob: with default state.
	 *		.class : Html.TABLE
	 * 		.contentText : RegularExpression(.*Running Job ID.*)
	 * 		.classIndex : 0
	 */
	protected StatelessGuiSubitemTestObject table_runningJob() 
	{
		return new StatelessGuiSubitemTestObject(
                        getMappedTestObject("table_runningJob"));
	}
	/**
	 * runningJob: with specific test context and state.
	 *		.class : Html.TABLE
	 * 		.contentText : RegularExpression(.*Running Job ID.*)
	 * 		.classIndex : 0
	 */
	protected StatelessGuiSubitemTestObject table_runningJob(TestObject anchor, long flags) 
	{
		return new StatelessGuiSubitemTestObject(
                        getMappedTestObject("table_runningJob"), anchor, flags);
	}
	
	/**
	 * tableExchange: with default state.
	 *		.id : tableExchange
	 * 		.class : Html.TABLE
	 */
	protected StatelessGuiSubitemTestObject table_tableExchange() 
	{
		return new StatelessGuiSubitemTestObject(
                        getMappedTestObject("table_tableExchange"));
	}
	/**
	 * tableExchange: with specific test context and state.
	 *		.id : tableExchange
	 * 		.class : Html.TABLE
	 */
	protected StatelessGuiSubitemTestObject table_tableExchange(TestObject anchor, long flags) 
	{
		return new StatelessGuiSubitemTestObject(
                        getMappedTestObject("table_tableExchange"), anchor, flags);
	}
	
	/**
	 * C_EXPASSWORD: with default state.
	 *		.type : password
	 * 		.class : Html.INPUT.password
	 * 		.name : C_EXPASSWORD
	 */
	protected TextGuiTestObject text_c_EXPASSWORD() 
	{
		return new TextGuiTestObject(
                        getMappedTestObject("text_c_EXPASSWORD"));
	}
	/**
	 * C_EXPASSWORD: with specific test context and state.
	 *		.type : password
	 * 		.class : Html.INPUT.password
	 * 		.name : C_EXPASSWORD
	 */
	protected TextGuiTestObject text_c_EXPASSWORD(TestObject anchor, long flags) 
	{
		return new TextGuiTestObject(
                        getMappedTestObject("text_c_EXPASSWORD"), anchor, flags);
	}
	
	/**
	 * C_EXPATH: with default state.
	 *		type : text
	 * 		.class : Html.INPUT.text
	 * 		name : C_EXPATH
	 */
	protected TextGuiTestObject text_c_EXPATH() 
	{
		return new TextGuiTestObject(
                        getMappedTestObject("text_c_EXPATH"));
	}
	/**
	 * C_EXPATH: with specific test context and state.
	 *		type : text
	 * 		.class : Html.INPUT.text
	 * 		name : C_EXPATH
	 */
	protected TextGuiTestObject text_c_EXPATH(TestObject anchor, long flags) 
	{
		return new TextGuiTestObject(
                        getMappedTestObject("text_c_EXPATH"), anchor, flags);
	}
	
	/**
	 * C_EXUSER: with default state.
	 *		type : text
	 * 		.class : Html.INPUT.text
	 * 		name : C_EXUSER
	 */
	protected TextGuiTestObject text_c_EXUSER() 
	{
		return new TextGuiTestObject(
                        getMappedTestObject("text_c_EXUSER"));
	}
	/**
	 * C_EXUSER: with specific test context and state.
	 *		type : text
	 * 		.class : Html.INPUT.text
	 * 		name : C_EXUSER
	 */
	protected TextGuiTestObject text_c_EXUSER(TestObject anchor, long flags) 
	{
		return new TextGuiTestObject(
                        getMappedTestObject("text_c_EXUSER"), anchor, flags);
	}
	
	/**
	 * C_EXUSEREMAIL: with default state.
	 *		type : text
	 * 		.class : Html.INPUT.text
	 * 		name : C_EXUSEREMAIL
	 */
	protected TextGuiTestObject text_c_EXUSEREMAIL() 
	{
		return new TextGuiTestObject(
                        getMappedTestObject("text_c_EXUSEREMAIL"));
	}
	/**
	 * C_EXUSEREMAIL: with specific test context and state.
	 *		type : text
	 * 		.class : Html.INPUT.text
	 * 		name : C_EXUSEREMAIL
	 */
	protected TextGuiTestObject text_c_EXUSEREMAIL(TestObject anchor, long flags) 
	{
		return new TextGuiTestObject(
                        getMappedTestObject("text_c_EXUSEREMAIL"), anchor, flags);
	}
	
	/**
	 * password: with default state.
	 *		.type : password
	 * 		.class : Html.INPUT.password
	 * 		.name : password
	 * 		class : loginPass
	 */
	protected TextGuiTestObject text_password() 
	{
		return new TextGuiTestObject(
                        getMappedTestObject("text_password"));
	}
	/**
	 * password: with specific test context and state.
	 *		.type : password
	 * 		.class : Html.INPUT.password
	 * 		.name : password
	 * 		class : loginPass
	 */
	protected TextGuiTestObject text_password(TestObject anchor, long flags) 
	{
		return new TextGuiTestObject(
                        getMappedTestObject("text_password"), anchor, flags);
	}
	
	/**
	 * username: with default state.
	 *		type : text
	 * 		.class : Html.INPUT.text
	 * 		name : username
	 * 		class : loginUser
	 */
	protected TextGuiTestObject text_username() 
	{
		return new TextGuiTestObject(
                        getMappedTestObject("text_username"));
	}
	/**
	 * username: with specific test context and state.
	 *		type : text
	 * 		.class : Html.INPUT.text
	 * 		name : username
	 * 		class : loginUser
	 */
	protected TextGuiTestObject text_username(TestObject anchor, long flags) 
	{
		return new TextGuiTestObject(
                        getMappedTestObject("text_username"), anchor, flags);
	}
	
	

	protected WebAdminHelper()
	{
		setScriptName("NetmailAdminUUI.WebAdmin");
	}
	
}

